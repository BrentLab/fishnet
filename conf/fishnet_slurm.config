params {

  config_profile_description = 'Linux/amd64 test environment'
  config_profile_contact = 'Woo Seok Jung (jungw@wustl.edu)'
  random_permutation = false
  output = 'results'
  GO_summaries_path  = 'GO_summaries'
  masterSummaries_path = 'masterSummaries'
  workdir = 'work'

}

docker {
    enabled = false
    runOptions = '-u $(id -u):$(id -g)'
}

singularity {
  enabled = true
  autoMounts = true
  cacheDir = "${launchDir}/singularity_images/"
  runOptions = '--no-home --bind /scratch/mblab/jungw/fishnet/:/app'
}

executor {

  submitRateLimit = "2 sec"

}

process {
  executor = "slurm"
  scratch = true

  withLabel:process_low {
    memory = 4.GB
  }
}

params {
    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '4.GB'
    max_cpus                   = 2
    max_time                   = '48.h'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
